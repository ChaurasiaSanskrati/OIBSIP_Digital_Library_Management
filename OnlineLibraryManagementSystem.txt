import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class LibraryManagementSystem {
    private static Map<String, Book> books = new HashMap<>(); // Store book details
    private static Map<String, Member> members = new HashMap<>(); // Store member details

    public static void main(String[] args) {
        System.out.println("Welcome to the Library Management System!");

        boolean exit = false;

        while (!exit) {
            System.out.println("\nPlease select an option:");
            System.out.println("1. Admin Module");
            System.out.println("2. User Module");
            System.out.println("3. Exit");

            int choice = Integer.parseInt(promptUser("Enter your choice (1-3): "));

            switch (choice) {
                case 1:
                    adminModule();
                    break;
                case 2:
                    userModule();
                    break;
                case 3:
                    exit = true;
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }

        System.out.println("Thank you for using the Library Management System. Goodbye!");
    }

    private static void adminModule() {
        System.out.println("\nAdmin Module:");

        boolean loggedIn = false;
        String adminPassword = "admin123"; // Admin password

        while (!loggedIn) {
            String password = promptUser("Enter admin password: ");

            if (password.equals(adminPassword)) {
                loggedIn = true;
            } else {
                System.out.println("Invalid password. Please try again.");
            }
        }

        boolean exit = false;

        while (!exit) {
            System.out.println("\nPlease select an option:");
            System.out.println("1. Add Book");
            System.out.println("2. Update Book");
            System.out.println("3. Delete Book");
            System.out.println("4. Add Member");
            System.out.println("5. Update Member");
            System.out.println("6. Delete Member");
            System.out.println("7. Exit Admin Module");

            int choice = Integer.parseInt(promptUser("Enter your choice (1-7): "));

            switch (choice) {
                case 1:
                    addBook();
                    break;
                case 2:
                    updateBook();
                    break;
                case 3:
                    deleteBook();
                    break;
                case 4:
                    addMember();
                    break;
                case 5:
                    updateMember();
                    break;
                case 6:
                    deleteMember();
                    break;
                case 7:
                    exit = true;
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }
    }

    private static void userModule() {
        System.out.println("\nUser Module:");

        String memberId = promptUser("Enter your member ID: ");

        if (!members.containsKey(memberId)) {
            System.out.println("Invalid member ID. Please contact the admin for assistance.");
            return;
        }

        boolean exit = false;

        while (!exit) {
            System.out.println("\nPlease select an option:");
            System.out.println("1. View Books");
            System.out.println("2. Search Book");
            System.out.println("3. Issue Book");
            System.out.println("4. Return Book");
            System.out.println("5. Email Query");
            System.out.println("6. Exit User Module");

            int choice = Integer.parseInt(promptUser("Enter your choice (1-6): "));

            switch (choice) {
                case 1:
                    viewBooks();
                    break;
                case 2:
                    searchBook();
                    break;
                case 3:
                    issueBook(memberId);
                    break;
                case 4:
                    returnBook(memberId);
                    break;
                case 5:
                    emailQuery(memberId);
                    break;
                case 6:
                    exit = true;
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }
    }

    private static String promptUser(String message) {
        System.out.print(message);

        Scanner scanner = new Scanner(System.in);

        return scanner.nextLine();
    }

    private static void addBook() {
        String bookId = promptUser("Enter book ID: ");
        String title = promptUser("Enter book title: ");
        String author = promptUser("Enter book author: ");
        String category = promptUser("Enter book category: ");

        Book book = new Book(bookId, title, author, category);
        books.put(bookId, book);

        System.out.println("Book added successfully.");
    }

    private static void updateBook() {
        String bookId = promptUser("Enter book ID to update: ");

        if (!books.containsKey(bookId)) {
            System.out.println("Book not found.");
            return;
        }

        String newTitle = promptUser("Enter new book title: ");
        String newAuthor = promptUser("Enter new book author: ");
        String newCategory = promptUser("Enter new book category: ");

        Book book = books.get(bookId);
        book.setTitle(newTitle);
        book.setAuthor(newAuthor);
        book.setCategory(newCategory);

        System.out.println("Book updated successfully.");
    }

    private static void deleteBook() {
        String bookId = promptUser("Enter book ID to delete: ");

        if (!books.containsKey(bookId)) {
            System.out.println("Book not found.");
            return;
        }

        books.remove(bookId);

        System.out.println("Book deleted successfully.");
    }

    private static void addMember() {
        String memberId = promptUser("Enter member ID: ");
        String name = promptUser("Enter member name: ");
        String email = promptUser("Enter member email: ");

        Member member = new Member(memberId, name, email);
        members.put(memberId, member);

        System.out.println("Member added successfully.");
    }

    private static void updateMember() {
        String memberId = promptUser("Enter member ID to update: ");

        if (!members.containsKey(memberId)) {
            System.out.println("Member not found.");
            return;
        }

        String newName = promptUser("Enter new member name: ");
        String newEmail = promptUser("Enter new member email: ");

        Member member = members.get(memberId);
        member.setName(newName);
        member.setEmail(newEmail);

        System.out.println("Member updated successfully.");
    }

    private static void deleteMember() {
        String memberId = promptUser("Enter member ID to delete: ");

        if (!members.containsKey(memberId)) {
            System.out.println("Member not found.");
            return;
        }

        members.remove(memberId);

        System.out.println("Member deleted successfully.");
    }

    private static void viewBooks() {
        System.out.println("\nAvailable Books:");

        if (books.isEmpty()) {
            System.out.println("No books available.");
            return;
        }

        for (Book book : books.values()) {
            System.out.println(book.toString());
        }
    }

    private static void searchBook() {
        String keyword = promptUser("Enter keyword to search: ");
        List<Book> searchResults = new ArrayList<>();

        for (Book book : books.values()) {
            if (book.getTitle().contains(keyword) || book.getAuthor().contains(keyword)
                    || book.getCategory().contains(keyword)) {
                searchResults.add(book);
            }
        }

        System.out.println("\nSearch Results:");

        if (searchResults.isEmpty()) {
            System.out.println("No books found.");
            return;
        }

        for (Book book : searchResults) {
            System.out.println(book.toString());
        }
    }

    private static void issueBook(String memberId) {
        String bookId = promptUser("Enter book ID to issue: ");

        if (!books.containsKey(bookId)) {
            System.out.println("Book not found.");
            return;
        }

        Member member = members.get(memberId);
        Book book = books.get(bookId);

        if (book.isIssued()) {
            System.out.println("Book is already issued.");
            return;
        }

        book.setIssued(true);
        book.setIssuedTo(memberId);

        System.out.println("Book issued successfully.");
    }

    private static void returnBook(String memberId) {
        String bookId = promptUser("Enter book ID to return: ");

        if (!books.containsKey(bookId)) {
            System.out.println("Book not found.");
            return;
        }

        Member member = members.get(memberId);
        Book book = books.get(bookId);

        if (!book.isIssued() || !book.getIssuedTo().equals(memberId)) {
            System.out.println("Book is not issued to you.");
            return;
        }

        book.setIssued(false);
        book.setIssuedTo("");

        System.out.println("Book returned successfully.");
    }

    private static void emailQuery(String memberId) {
        String query = promptUser("Enter your query: ");
        Member member = members.get(memberId);

        // Implement the logic to send an email with the query to the library admin
        System.out.println("Query sent successfully.");
    }
}

class Book {
    private String bookId;
    private String title;
    private String author;
    private String category;
    private boolean issued;
    private String issuedTo;

    public Book(String bookId, String title, String author, String category) {
        this.bookId = bookId;
        this.title = title;
        this.author = author;
        this.category = category;
        this.issued = false;
        this.issuedTo = "";
    }

    public String getBookId() {
        return bookId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public boolean isIssued() {
        return issued;
    }

    public void setIssued(boolean issued) {
        this.issued = issued;
    }

    public String getIssuedTo() {
        return issuedTo;
    }

    public void setIssuedTo(String issuedTo) {
        this.issuedTo = issuedTo;
    }

    @Override
    public String toString() {
        return "Book ID: " + bookId + ", Title: " + title + ", Author: " + author + ", Category: " + category +
                ", Issued: " + (issued ? "Yes" : "No") + ", Issued To: " + (issued ? issuedTo : "N/A");
    }
}

class Member {
    private String memberId;
    private String name;
    private String email;

    public Member(String memberId, String name, String email) {
        this.memberId = memberId;
        this.name = name;
        this.email = email;
    }

    public String getMemberId() {
        return memberId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}
